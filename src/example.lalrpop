use std::str::FromStr;
use awesome_parser::ast::{Expr, OpCode};

grammar;

pub Expr: Box<Expr> = {
    MathTerm,
    MathExpr,
}

MathExpr: Box<Expr> = {
    #[precedence(level="3")] #[assoc(side="left")]
    <lhs: MathTerm> "+" <rhs: MathTerm> => Box::new(Expr::Op(lhs, OpCode::Add, rhs)),
    <lhs: MathTerm> "-" <rhs: MathTerm> => Box::new(Expr::Op(lhs, OpCode::Sub, rhs)),
    #[precedence(level="2")] #[assoc(side="left")]
    <lhs: MathTerm> "*" <rhs: MathTerm> => Box::new(Expr::Op(lhs, OpCode::Mul, rhs)),
    <lhs: MathTerm> "/" <rhs: MathTerm> => Box::new(Expr::Op(lhs, OpCode::Div, rhs)),
    #[precedence(level="1")]
    <lhs: MathTerm> "^" <rhs: MathTerm> => Box::new(Expr::Op(lhs, OpCode::Exp, rhs)),
}

MathTerm: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <MathExpr> ")"
}

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};