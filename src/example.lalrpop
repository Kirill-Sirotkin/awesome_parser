use std::str::FromStr;
use awesome_parser::ast::{Expr, OpCode, FunCode, Statement};

grammar;

pub Stm: Box<Statement> = {
    #[precedence(level="2")] #[assoc(side="left")]
    <lhs: Stm> ";" <rhs: Stm> => Box::new(Statement::Seq(lhs, rhs)),
    #[precedence(level="1")]
    FunctionExpr,
}

FunctionExpr: Box<Statement> = {
    "print" "(" <expr: MathExpr> ")" => Box::new(Statement::Fun(FunCode::Print, expr))
}

MathExpr: Box<Expr> = {
    #[precedence(level="4")] #[assoc(side="left")]
    <lhs: MathExpr> "+" <rhs: MathExpr> => Box::new(Expr::Op(lhs, OpCode::Add, rhs)),
    <lhs: MathExpr> "-" <rhs: MathExpr> => Box::new(Expr::Op(lhs, OpCode::Sub, rhs)),
    #[precedence(level="3")] #[assoc(side="left")]
    <lhs: MathExpr> "*" <rhs: MathExpr> => Box::new(Expr::Op(lhs, OpCode::Mul, rhs)),
    <lhs: MathExpr> "/" <rhs: MathExpr> => Box::new(Expr::Op(lhs, OpCode::Div, rhs)),
    #[precedence(level="2")] #[assoc(side="left")]
    <lhs: MathExpr> "^" <rhs: MathExpr> => Box::new(Expr::Op(lhs, OpCode::Exp, rhs)),
    #[precedence(level="1")]
    MathTerm,
}

MathTerm: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    "(" <MathExpr> ")"
}

Num: i32 = {
    r"[0-9]+" => i32::from_str(<>).unwrap(),
};